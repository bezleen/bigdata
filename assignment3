import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
 
public class Assignment3 {
    public static class CustsMapper extends Mapper <Object, Text, Text, Text>
    {
        public void map(Object key, Text value, Context context)
        throws IOException, InterruptedException 
        {
            String record = value.toString();
            String[] parts = record.split(",");
            context.write(new Text(parts[0]), new Text("age_" + parts[3]));
        }
    }
        
    public static class TransMapper extends Mapper <Object, Text, Text, Text>
    {
        public void map(Object key, Text value, Context context) 
        throws IOException, InterruptedException 
        {
            String record = value.toString();
            String[] parts = record.split(",");
            context.write(new Text(parts[2]), new Text("type_" + parts[4]));
        }
    }
    
    public static class FirstJobReducer extends Reducer <Text, Text, Text, Text>
    {
        public void reduce(Text key, Iterable<Text> values, Context context)
        throws IOException, InterruptedException 
        {
            String key_reduce="";
            String value_reduce="";
            boolean first_loop = true;
            for (Text t : values) 
            { 
                String parts[] = t.toString().split("_");
                if (parts[0].equals("age")) 
                {
                    key_reduce = parts[1];
                } 
                else if (parts[0].equals("type")) 
                {
                    if (first_loop == true)
                    {
                        first_loop = false;
                        value_reduce += parts[1];
                    }
                    else {
                        value_reduce += ","+parts[1];
                    }
                }
            }
            String str = String.format("%d %f", count, total);
            context.write(new Text(key_reduce), new Text(value_reduce));
        }
    }

    public static class SecondJobMapper extends Mapper <Object, Text, Text, Text>
    {
        public void map(Object key, Text value, Context context) 
        throws IOException, InterruptedException 
        {


            // value 
            String record = value.toString().trim();
            String[] parts = value_record.split("\t");
            
            String age = parts[0];
            String[] gameTypes = value_record.split(",");
            for (String gameType: gameTypes)
            {
                context.write(new Text(gameType), new Text(age));
            }
        }
    }



    public static class SecondJobReducer extends Reducer <Text, Text, Text, Text>
    {
        public void reduce(Text key, Iterable<Text> values, Context context)
        throws IOException, InterruptedException 
        {
            String result = "";
            boolean first_loop = true;


            int min =0;
            int max = 0;
            double sum=0;
            int len=0;
            boolean first_loop = true;
            for (Text t : values) 
            { 
                age_value =Float.parseFloat(t.toString().trim());
                sum += age_value
                len += 1;
                if (first_loop == true)
                {
                    first_loop = false;
                    min = age_value;
                    max = age_value;
                }
                else 
                {
                    if (age_value < min)
                    {
                        min = age_value;
                    }
                    if (age_value > max)
                    {
                        max = age_value;
                    }
                }   
            }
            double avg = sum/len;
            context.write(key, new Text("Min: " + Integer.toString(min) + " Max: "+Integer.toString(max) + " Avg: "+Double.toString(avg))));
        }
    }
    
    
    public static void main(String[] args) throws Exception {
        // JOB 1
        Configuration conf = new Configuration();
        Job job = new Job(conf, "JOB1");
        job.setJarByClass(Assignment3.class);
        job.setReducerClass(FirstJobReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        
        MultipleInputs.addInputPath(job, new Path(args[0]),TextInputFormat.class, CustsMapper.class);
        MultipleInputs.addInputPath(job, new Path(args[1]),TextInputFormat.class, TransMapper.class);
        Path outputPath = new Path(args[2]);
        
        FileOutputFormat.setOutputPath(job, outputPath);
        job.waitForCompletion(true);

        //JOB 2
        Configuration conf2 = new Configuration();
        Job job2 = new Job(conf2, "JOB2");
        job2.setJarByClass(Assignment3.class);
        job2.setMapperClass(SecondJobMapper.class);
        job2.setReducerClass(SecondJobReducer.class);
        job2.setOutputKeyClass(Text.class);
        job2.setOutputValueClass(Text.class);
        FileInputFormat.addInputPath(job2, new Path(args[2]+"/part*"));
        FileOutputFormat.setOutputPath(job2, new Path(args[3]));
        System.exit(job2.waitForCompletion(true) ? 0 : 1);
    }
 }
