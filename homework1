import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
 
 public class Homework1 {
    
        //read trans file and show the list of: Game_type Total_amount
    public static class HomeworkMapper extends Mapper <Object, Text, Text, Text>
    {
        public void map(Object key, Text value, Context context) 
        throws IOException, InterruptedException 
        {
            String record = value.toString().trim();
            String[] parts = record.split(",");
            
            String custId = parts[2];
            String gameType = parts[4];
            String amount = parts[3];
            
            context.write(new Text(custId + "_" + gameType), new Text(amount));
        }
    }
    
    public static class HomeworkReducer extends Reducer <Text, Text, Text, Text>
    {
        public void reduce(Text key, Iterable<Text> values, Context context)
        throws IOException, InterruptedException 
        {
            int totalTime = 0;
            double totalAmount = 0.0;

            for (Text t : values) 
            { 
                totalTime += 1;
                totalAmount += Float.parseFloat(t.toString().trim());
            }
            context.write(key, new Text(Integer.toString(totalTime) + "_" + Double.toString(totalAmount)));
        }
    }


    public static class HomeworkMapper1 extends Mapper <Object, Text, Text, Text>
    {
        public void map(Object key, Text value, Context context) 
        throws IOException, InterruptedException 
        {
            // key
            String key_record = key.toString().trim();
            String[] key_parts = key_record.split("_");

            String custId = value_parts[0];
            String gameType = value_parts[1];

            // value 
            String value_record = value.toString().trim();
            String[] value_parts = value_record.split("_");
            
            String totalTime = value_parts[0];
            String totalAmount = value_parts[1];
            
            context.write(new Text(custId), new Text(gameType + "_" + totalTime + "times_" + totalAmount));
        }
    }

    public static class HomeworkReducer1 extends Reducer <Text, Text, Text, Text>
    {
        public void reduce(Text key, Iterable<Text> values, Context context)
        throws IOException, InterruptedException 
        {
            String result = "";
            boolean first_loop = true;
            for (Text t : values) 
            { 
                if (first_loop == true){
                    first_loop = false;
                    String result_data = t.toString().trim();
                    result += result_data;
                }
                else {
                    String result_data = t.toString().trim();
                    result += ","+result_data;
                }
                
            }
            context.write(key, new Text("["+result+"]"));
        }
    }
    
    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = new Job(conf, "Homework1 job 1");
        job.setJarByClass(Homework1.class);
        job.setMapperClass(HomeworkMapper.class);
        job.setReducerClass(HomeworkReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);
        //job.setNumReduceTasks(0);
        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));
        job.waitForCompletion(true);



        Configuration conf2 = new Configuration();
        Job job2 = new Job(conf2, "Homework1 job 2");
        job2.setJarByClass(Homework1.class);
        job2.setMapperClass(HomeworkMapper1.class);
        job2.setReducerClass(HomeworkReducer1.class);
        job2.setOutputKeyClass(Text.class);
        job2.setOutputValueClass(Text.class);
        //job.setNumReduceTasks(0);
        FileInputFormat.addInputPath(job, new Path(args[1]));
        FileOutputFormat.setOutputPath(job, new Path(args[2]));
        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
 }

